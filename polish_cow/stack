#pragma once
#ifndef  MY_STACK
#define MY_STACK

namespace dl {
	template <class T>
	class stack {
	public:
		stack(){

		}
		stack(std::initializer_list<T> a) {
			for (int i = 0; i < a.size(); i++) 
				push(a.begin()[i]);
		}
		void push(T value) {
			if (_start != nullptr) {
				_top = new unit;
				
			}
			else {
				_start = new unit;
				_top = _start;
				_start->value = value;
			}

			_size++;
		}
		T top() {
			return _top->value;
		}
		bool empty() {
			return !(int)_size;
		}
		void pop();
		size_t size() {
			return _size;
		}
		//void reverse();
	private:
		struct unit { T value; unit* next = nullptr; unit* prev = nullptr; };
		size_t _size = 0;
		unit* _start = nullptr;
		unit* _top = nullptr;
	};
}

#endif // ! MY_STACK


