#pragma once
#ifndef  MY_STACK
#define MY_STACK

namespace dl {
	template <class T>
	class stack {
	public:
		stack() {}
		stack(std::initializer_list<T> list) {
			for (int i = 0; i < list.size(); i++)
				push(list.begin()[i]);
		}

		const size_t& size = _size;

		bool empty() {
			return !_size;
		}
		void push(T value) {
			Node* now;
			now = new Node{ value };
			if (Top == nullptr) {
				Top = now;
			}
			else {
				now->next = Top;
				Top = now;
			}
			_size++;
		}
		T pop() {
			Node* now = Top;
			Top = now->next;
			T value = now->value;
			delete now;
			_size--;
			return value;
		}
		void jpop() {
			Node* now = Top;
			Top = now->next;
			delete now;
			_size--;
		}
		T top() {
			return Top->value;
		}
		T peek(int depth = 0) {
			Node* now = Top;
			for (int i = 0; i < depth && i < _size; i++)
				now = now->next;
			return now->value;
		}
	private:
		struct Node {
			T value{};
			Node* next = nullptr;
		} *Top = nullptr;
		size_t _size = 0;
	};
}

#endif // ! MY_STACK


